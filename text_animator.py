from .. import loader, utils
import asyncio
from random import choice

@loader.tds
class TextAnimatorMod(loader.Module):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    strings = {
        "name": "TextAnimator",
        "help": (
            "üé≠ <b>–ê–Ω–∏–º–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞</b>\n\n"
            "<code>.anim –≤–æ–ª–Ω–∞ –ü—Ä–∏–≤–µ—Ç</code> - —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã\n"
            "<code>.anim —Ä–∞–¥—É–≥–∞ –¢–µ–∫—Å—Ç</code> - —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
            "<code>.anim –ø–µ—á–∞—Ç—å –°–æ–æ–±—â–µ–Ω–∏–µ</code> - —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏\n\n"
            "‚ú® <b>–≠—Ñ—Ñ–µ–∫—Ç—ã:</b> –≤–æ–ª–Ω–∞, —Ä–∞–¥—É–≥–∞, –ø–µ—á–∞—Ç—å, –º–∞—Ç—Ä–∏—Ü–∞, –¥—Ä–æ–∂—å"
        )
    }

    async def animcmd(self, message):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ - .anim <—ç—Ñ—Ñ–µ–∫—Ç> <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["help"])
            return

        if " " not in args:
            effect = "—Ä–∞–¥—É–≥–∞"
            text = args
        else:
            effect, text = args.split(" ", 1)

        effect = effect.lower()
        animated = await self.animate(text, effect)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ)
        await message.reply(animated)

    async def animate(self, text: str, effect: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        effects = {
            "–≤–æ–ª–Ω–∞": self._wave,
            "—Ä–∞–¥—É–≥–∞": self._rainbow,
            "–ø–µ—á–∞—Ç—å": self._typing,
            "–º–∞—Ç—Ä–∏—Ü–∞": self._matrix,
            "–¥—Ä–æ–∂—å": self._shake
        }

        if effect not in effects:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(effects.keys())

        return await effects[effect](text)

    async def _wave(self, text: str) -> str:
        """–≠—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã"""
        wave_chars = ['~', '‚âã', '‚âà']
        return " ".join([f"{choice(wave_chars)}{char}{choice(wave_chars)}" for char in text])

    async def _rainbow(self, text: str) -> str:
        """–†–∞–¥—É–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"""
        colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']
        colored = []
        for i, char in enumerate(text):
            color = colors[i % len(colors)]
            colored.append(f"<span color='{color}'>{char}</span>")
        return "".join(colored)

    async def _typing(self, text: str) -> str:
        """–≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏"""
        result = []
        for i in range(1, len(text)+1):
            part = text[:i]
            result.append(f"<code>{part}</code>")
        return result[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

    async def _matrix(self, text: str) -> str:
        """–ú–∞—Ç—Ä–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"""
        chars = "‚ñë‚ñí‚ñì‚ñà‚ïë"
        return "".join([f"<span color='#00FF00'>{choice(chars)}</span>" if char != " " else " " for char in text])

    async def _shake(self, text: str) -> str:
        """–î—Ä–æ–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç"""
        directions = ["‚Üí", "‚Üê", "‚Üë", "‚Üì"]
        return "".join([f"{choice(directions)}{char}{choice(directions)}" for char in text])
