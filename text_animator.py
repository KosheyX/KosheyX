from .. import loader, utils
import asyncio
from random import choice, randint

@loader.tds
class TextAnimatorMod(loader.Module):
    """–ê–Ω–∏–º–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –∫—Ä—É—Ç—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    strings = {
        "name": "TextAnimator",
        "effects": (
            "üåÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</b>\n\n"
            "<code>wave</code> - –í–æ–ª–Ω–∞\n"
            "<code>rainbow</code> - –†–∞–¥—É–≥–∞\n"
            "<code>typing</code> - –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏\n"
            "<code>matrix</code> - –ú–∞—Ç—Ä–∏—Ü–∞\n"
            "<code>shake</code> - –î—Ä–æ–∂–∞–Ω–∏–µ\n"
            "<code>rotate</code> - –í—Ä–∞—â–µ–Ω–∏–µ\n"
            "<code>expand</code> - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n"
            "<code>invert</code> - –ò–Ω–≤–µ—Ä—Å–∏—è\n"
            "<code>random</code> - –°–ª—É—á–∞–π–Ω—ã–π\n"
            "<code>emoji</code> - –≠–º–æ–¥–∑–∏-—Å–ø–∞–º\n\n"
            "‚ú® <b>–ü—Ä–∏–º–µ—Ä:</b> <code>.anim wave –ü—Ä–∏–≤–µ—Ç</code>"
        ),
        "processing": "<i>–ê–Ω–∏–º–∏—Ä—É—é —Ç–µ–∫—Å—Ç...</i>"
    }

    async def animcmd(self, message):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ - .anim <—ç—Ñ—Ñ–µ–∫—Ç> <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args or " " not in args:
            await utils.answer(message, self.strings["effects"])
            return

        effect, text = args.split(" ", 1)
        effect = effect.lower()

        await utils.answer(message, self.strings["processing"])
        result = await self.animate_text(text, effect)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∏–º–∏—Ä—É—é —Ç–µ–∫—Å—Ç..." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.delete()
        await utils.answer(message, result)

    async def animate_text(self, text: str, effect: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        effects = {
            "wave": self.wave_effect,
            "rainbow": self.rainbow_effect,
            "typing": self.typing_effect,
            "matrix": self.matrix_effect,
            "shake": self.shake_effect,
            "rotate": self.rotate_effect,
            "expand": self.expand_effect,
            "invert": self.invert_effect,
            "random": self.random_effect,
            "emoji": self.emoji_effect
        }

        if effect not in effects:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.anim</code> –¥–ª—è —Å–ø–∏—Å–∫–∞"

        return await effects[effect](text)

    async def wave_effect(self, text: str) -> str:
        """–≠—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã"""
        wave_chars = ['~', '‚âã', '‚âà', '‚àø']
        result = []
        for i, char in enumerate(text):
            wave = choice(wave_chars)
            result.append(f"{wave}{char}{wave}")
        return " ".join(result)

    async def rainbow_effect(self, text: str) -> str:
        """–†–∞–¥—É–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"""
        colors = [
            'red', 'orange', 'yellow', 
            'green', 'blue', 'purple'
        ]
        result = []
        for i, char in enumerate(text):
            color = colors[i % len(colors)]
            result.append(f"<span color='{color}'>{char}</span>")
        return "".join(result)

    async def typing_effect(self, text: str) -> str:
        """–≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        result = []
        for i in range(1, len(text)+1):
            part = text[:i]
            remaining = "_" * (len(text) - i)
            result.append(f"<code>{part}{remaining}</code>")
            if len(result) > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
                result.pop(0)
        return result[-1]

    async def matrix_effect(self, text: str) -> str:
        """–ú–∞—Ç—Ä–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"""
        matrix_chars = "‚ñë‚ñí‚ñì‚ñà‚ïë‚ïó‚ïù‚ïî‚ïö"
        result = []
        for char in text:
            if char == " ":
                result.append(" ")
                continue
            matrix_char = choice(matrix_chars)
            result.append(f"<span color='#00FF00'>{matrix_char}</span>")
        return "".join(result)

    async def shake_effect(self, text: str) -> str:
        """–î—Ä–æ–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç"""
        directions = ["‚Üí", "‚Üê", "‚Üë", "‚Üì"]
        return "".join([
            f"{choice(directions)}{char}{choice(directions)}" 
            for char in text
        ])

    async def rotate_effect(self, text: str) -> str:
        """–í—Ä–∞—â–∞—é—â–∏–π—Å—è —Ç–µ–∫—Å—Ç"""
        rotated = []
        for char in text:
            rotated.append(f"<b>{char}</b>")
        return " ".join(rotated)

    async def expand_effect(self, text: str) -> str:
        """–†–∞—Å—à–∏—Ä—è—é—â–∏–π—Å—è —Ç–µ–∫—Å—Ç"""
        sizes = ["small", "medium", "large"]
        return "".join([
            f"<span size='{choice(sizes)}'>{char}</span>" 
            for char in text
        ])

    async def invert_effect(self, text: str) -> str:
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        return text[::-1]

    async def random_effect(self, text: str) -> str:
        """–°–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"""
        effects = [
            self.wave_effect,
            self.rainbow_effect,
            self.matrix_effect,
            self.shake_effect
        ]
        return await choice(effects)(text)

    async def emoji_effect(self, text: str) -> str:
        """–≠–º–æ–¥–∑–∏-—Å–ø–∞–º"""
        emojis = ["‚ú®", "‚ö°", "üéØ", "üî•", "üí´", "üåü", "üåÄ"]
        return " ".join([
            f"{char}{choice(emojis)}" 
            for char in text
        ])
