from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.functions.messages import GetStickerSetRequest
from telethon.tl.types import InputStickerSetShortName
import io
import random

@loader.tds
class StickerMasterMod(loader.Module):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ"""
    strings = {
        "name": "StickerMaster",
        "sticker_saved": "üÜî <b>–°—Ç–∏–∫–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!</b>",
        "no_reply": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä!</b>",
        "pack_not_found": "‚ùå <b>–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
        "sticker_info": (
            "üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–µ:</b>\n\n"
            "‚Ä¢ <b>ID:</b> <code>{sticker_id}</code>\n"
            "‚Ä¢ <b>–≠–º–æ–¥–∑–∏:</b> {emoji}\n"
            "‚Ä¢ <b>–ù–∞–±–æ—Ä:</b> {set_name}\n"
            "‚Ä¢ <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
            "‚Ä¢ <b>–†–∞–∑–º–µ—Ä:</b> {width}x{height}"
        ),
        "help": (
            "üõ† <b>–ö–æ–º–∞–Ω–¥—ã StickerMaster:</b>\n\n"
            "<code>.stickersave</code> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
            "<code>.stickerinfo</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–µ\n"
            "<code>.stickersend</code> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä\n"
            "<code>.stickerfind –∫–æ—Ç–æ–≤</code> - –Ω–∞–π—Ç–∏ —Å—Ç–∏–∫–µ—Ä—ã –ø–æ —Ç–µ–≥—É\n"
            "<code>.stickermake</code> - —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)"
        )
    }

    def __init__(self):
        self.sticker_collection = {}

    async def client_ready(self, client, db):
        self._client = client

    async def stickersavecmd(self, message: Message):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        reply = await message.get_reply_message()
        if not reply or not reply.sticker:
            await utils.answer(message, self.strings["no_reply"])
            return

        sticker = reply.sticker
        if not hasattr(self, 'sticker_collection'):
            self.sticker_collection = {}

        self.sticker_collection[sticker.id] = sticker
        await utils.answer(message, self.strings["sticker_saved"])

    async def stickerinfocmd(self, message: Message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–µ"""
        reply = await message.get_reply_message()
        if not reply or not reply.sticker:
            await utils.answer(message, self.strings["no_reply"])
            return

        try:
            sticker_set = await self._client(GetStickerSetRequest(
                InputStickerSetShortName(reply.sticker.set.short_name)
            )
            author = sticker_set.set.owner_id or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            info = self.strings["sticker_info"].format(
                sticker_id=reply.sticker.id,
                emoji=reply.sticker.emoji or "‚ùå",
                set_name=reply.sticker.set.short_name,
                author=author,
                width=reply.sticker.width,
                height=reply.sticker.height
            )
            await utils.answer(message, info)
        except:
            await utils.answer(message, self.strings["pack_not_found"])

    async def stickersendcmd(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        if not self.sticker_collection:
            await utils.answer(message, "‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç–∞!")
            return

        random_sticker = random.choice(list(self.sticker_collection.values()))
        await message.delete()
        await message.client.send_file(
            message.to_id,
            random_sticker,
            reply_to=message.reply_to_msg_id
        )

    async def stickermakecmd(self, message: Message):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)"""
        reply = await message.get_reply_message()
        if not reply or not reply.photo:
            await utils.answer(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ!")
            return

        await utils.answer(message, "üîÑ –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä...")
        photo = await reply.download_media(bytes)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å—Ç–∏–∫–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        sticker = io.BytesIO(photo)
        sticker.name = "sticker.webp"
        
        await message.client.send_file(
            message.to_id,
            sticker,
            force_document=False,
            allow_cache=False,
            reply_to=message.reply_to_msg_id
        )
        await message.delete()

    async def stickerfindcmd(self, message: Message):
        """–ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Ç–µ–≥—É"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞!")
            return

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º
        # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        await utils.answer(message, f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ–≥—É ¬´{args}¬ª:\n\n(–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã)")

    async def on_message(self, message: Message):
        """–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ç–∏–∫–µ—Ä–∞–º–∏"""
        if not message.text:
            return

        triggers = {
            "–ø—Ä–∏–≤–µ—Ç": "üëã",
            "–ø–æ–∫–∞": "üëã",
            "–ª—é–±–ª—é": "‚ù§Ô∏è",
            "—Å–º–µ—Ö": "üòÇ"
        }

        for word, emoji in triggers.items():
            if word in message.text.lower():
                await message.reply(emoji)
                break
