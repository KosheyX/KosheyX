import json
import os
import random
import re
import asyncio
from datetime import datetime
from collections import defaultdict
from typing import Dict, List, Tuple, Optional, Any
from hikkatl.types import Message
from hikkatl.tl.functions.messages import SendMessageRequest
from .. import loader, utils
import aiohttp
from bs4 import BeautifulSoup
import logging

logger = logging.getLogger(__name__)

@loader.tds
class SelfLearningBotMod(loader.Module):
    """–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–∞–º"""

    strings = {
        "name": "SelfLearningBot",
        "cfg_bot_token": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather",
        "cfg_memory_limit": "–õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ (—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
        "born": "üë∂ *–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–æ–¥–∏–ª—Å—è!* –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π ‚Äî —è –±—É–¥—É —É—á–∏—Ç—å—Å—è!",
        "ready": "üß† *–Ø –Ω–∞—É—á–∏–ª—Å—è –æ—Ç–≤–µ—á–∞—Ç—å!* –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å!",
        "searching": "üîç *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...*",
        "no_results": "‚ùå –ù–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –∏–Ω–∞—á–µ.",
        "thinking": "ü§î *–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...*",
        "memory_cleared": "üßπ *–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!* –ù–∞—á–∏–Ω–∞—é —É—á–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
        "stats": "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–°–ª–æ–≤ –≤ –±–∞–∑–µ: {words}",
        "no_memory": "‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø–∞–º—è—Ç–∏ –æ –Ω–∞—à–µ–º –¥–∏–∞–ª–æ–≥–µ.",
        "invalid_bot_token": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "BOT_TOKEN",
                None,
                lambda: self.strings["cfg_bot_token"],
                validator=loader.validators.Token()
            ),
            loader.ConfigValue(
                "MEMORY_LIMIT",
                100,
                lambda: self.strings["cfg_memory_limit"],
                validator=loader.validators.Integer(minimum=10, maximum=1000)
            ),
        )
        self.memory_file = os.path.join(loader.MODULES_DIR, "self_bot_memory.json")
        self.ngrams_file = os.path.join(loader.MODULES_DIR, "self_bot_ngrams.json")
        self.ngrams = defaultdict(list)
        self.dialog_context = defaultdict(list)
        self.load_data()
        self.bot_running = False
        self._bot_task = None

    async def client_ready(self, client, db):
        self._client = client
        if self.config["BOT_TOKEN"]:
            await self.start_bot()
        asyncio.create_task(self.autostart_messages())

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç N-–≥—Ä–∞–º–º—ã –∏ –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if os.path.exists(self.memory_file):
                with open(self.memory_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    self.dialog_context = defaultdict(list, {
                        int(k): v[-self.config["MEMORY_LIMIT"]:] 
                        for k, v in data.items()
                    })
            
            if os.path.exists(self.ngrams_file):
                with open(self.ngrams_file, "r", encoding="utf-8") as f:
                    self.ngrams = defaultdict(list, json.load(f))
                    
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç N-–≥—Ä–∞–º–º—ã –∏ –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with open(self.memory_file, "w", encoding="utf-8") as f:
                json.dump(
                    {k: v for k, v in self.dialog_context.items() if v}, 
                    f,
                    ensure_ascii=False,
                    indent=2
                )
                
            with open(self.ngrams_file, "w", encoding="utf-8") as f:
                json.dump(
                    dict(self.ngrams), 
                    f,
                    ensure_ascii=False,
                    indent=2
                )
                
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def update_ngrams(self, text: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç N-–≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –ø–∞—Ä—ã —Å–ª–æ–≤)"""
        words = re.findall(r"\w+", text.lower())
        for i in range(len(words) - 1):
            if words[i+1] not in self.ngrams[words[i]]:
                self.ngrams[words[i]].append(words[i + 1])

    async def generate_response(self, user_id: int, user_text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ N-–≥—Ä–∞–º–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.dialog_context[user_id].append({
            "text": user_text,
            "time": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
        if len(self.dialog_context[user_id]) > self.config["MEMORY_LIMIT"]:
            self.dialog_context[user_id] = self.dialog_context[user_id][-self.config["MEMORY_LIMIT"]:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º N-–≥—Ä–∞–º–º—ã
        self.update_ngrams(user_text)
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        if any(q_word in user_text.lower() for q_word in ["—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–∫—Ç–æ", "–≥–¥–µ"]):
            web_result = await self.scrape_web(user_text)
            if web_result:
                return f"{self.strings['searching']}\n\n{web_result[:300]}{'...' if len(web_result) > 300 else ''}"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ N-–≥—Ä–∞–º–º
        words = re.findall(r"\w+", user_text.lower())
        last_word = words[-1] if words and words[-1] in self.ngrams else random.choice(
            [k for k in self.ngrams.keys() if len(self.ngrams[k]) > 3] or list(self.ngrams.keys())
        )
        
        response_words = []
        current_word = last_word
        
        for _ in range(random.randint(5, 15)):
            if current_word in self.ngrams and self.ngrams[current_word]:
                next_word = random.choice(self.ngrams[current_word])
                response_words.append(next_word)
                current_word = next_word
            else:
                break
        
        if response_words:
            response = " ".join(response_words).capitalize()
            response = response + random.choice([".", "!", "?"])
        else:
            response = random.choice([
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å...",
                "–Ø –µ—â—ë —É—á—É—Å—å, —Å–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ!",
                "–ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, –æ —á—ë–º –≤—ã...",
                "–ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É?",
            ])
        
        return response

    async def scrape_web(self, query: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (—á–µ—Ä–µ–∑ DuckDuckGo)"""
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                          "(KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://html.duckduckgo.com/html/?q={aiohttp.helpers.quote_plus(query)}"
                async with session.get(url, headers=headers, timeout=5) as resp:
                    if resp.status != 200:
                        return None
                    html = await resp.text()
                    soup = BeautifulSoup(html, "html.parser")
                    result = soup.find("div", class_="result__snippet")
                    return result.get_text().strip() if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {e}")
            return None

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if self.bot_running:
            return
            
        from hikkatl import TelegramClient, events
        from hikkatl.errors import ApiIdInvalidError, AccessTokenInvalidError
        
        try:
            self.bot = TelegramClient(
                "self_learning_bot", 
                self._client.api_id, 
                self._client.api_hash
            )
            
            await self.bot.start(bot_token=self.config["BOT_TOKEN"])
            self.bot.add_event_handler(
                self.bot_message_handler, 
                events.NewMessage(incoming=True)
            )
            
            self.bot_running = True
            self._bot_task = asyncio.create_task(self.bot.run_until_disconnected())
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
        except AccessTokenInvalidError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            await self._client.send_message(
                "me",
                self.strings["invalid_bot_token"]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

    async def bot_message_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if not event.text or event.sender_id == (await event.client.get_me()).id:
            return
            
        user_id = event.sender_id
        try:
            async with event.client.action(event.chat_id, "typing"):
                response = await self.generate_response(user_id, event.text)
                await event.reply(response)
                self.save_data()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")

    async def on_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —é–∑–µ—Ä–±–æ—Ç–µ"""
        if message.out or not message.text or not message.sender_id:
            return
            
        user_id = message.sender_id
        try:
            async with self._client.action(message.peer_id, "typing"):
                response = await self.generate_response(user_id, message.text)
                await utils.answer(message, response)
                self.save_data()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def autostart_messages(self):
        """–ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª—á–∏—Ç"""
        while True:
            try:
                await asyncio.sleep(3600 * 6)  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                
                if not self.dialog_context:
                    continue
                    
                for user_id, messages in list(self.dialog_context.items()):
                    if not messages:
                        continue
                        
                    last_msg_time = datetime.fromisoformat(messages[-1]["time"])
                    if (datetime.now() - last_msg_time).total_seconds() > 3600 * 12:
                        try:
                            await self._client(SendMessageRequest(
                                peer=user_id,
                                message="ü§ñ –î–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—å! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?",
                                no_webpage=True
                            ))
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            if "USER_IS_BLOCKED" in str(e):
                                del self.dialog_context[user_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ autostart_messages: {e}")
                await asyncio.sleep(60)

    @loader.command()
    async def slbotclear(self, message: Message):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –±–æ—Ç–∞"""
        self.ngrams.clear()
        self.dialog_context.clear()
        self.save_data()
        await utils.answer(message, self.strings["memory_cleared"])

    @loader.command()
    async def slbotstats(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        stats = {
            "users": len(self.dialog_context),
            "words": len(self.ngrams)
        }
        await utils.answer(message, self.strings["stats"].format(**stats))

 @loader.command()
async def slbotmemory(self, message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø–æ–º–Ω–∏–ª"""
    user_id = message.sender_id
    if user_id not in self.dialog_context or not self.dialog_context[user_id]:
        await utils.answer(message, self.strings["no_memory"])
        return
        
    last_messages = "\n".join(
        f"{i+1}. {msg['text']}" 
        for i, msg in enumerate(self.dialog_context[user_id][-5:])
    )  # <- –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
    
    await utils.answer(
        message,
        f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º –¥–∏–∞–ª–æ–≥–µ:</b>\n\n{last_messages}"
    )

    @loader.command()
    async def slbotstart(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if not self.config["BOT_TOKEN"]:
            await utils.answer(
                message,
                "‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .config –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
            return
            
        if self.bot_running:
            await utils.answer(message, "‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        await self.start_bot()
        await utils.answer(message, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    @loader.command()
    async def slbotstop(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if not self.bot_running:
            await utils.answer(message, "‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        try:
            self._bot_task.cancel()
            await self.bot.disconnect()
            self.bot_running = False
            await utils.answer(message, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
