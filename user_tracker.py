from hikka import loader, utils
from hikka.types import Config, ConfigField
from telethon.tl.types import UserStatusOnline, UserStatusOffline
from telethon import events
from datetime import datetime, timedelta
import asyncio
import csv
import io
import pandas as pd

@loader.tds
class UserTracker(loader.Module):
    """UserTracker ‚Äî —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    strings = {"name": "UserTracker"}

    def __init__(self):
        self.config = Config(
            ConfigField(
                "REPORT_CHAT",
                default="https://t.me/+ve_fxQ6dYj9hOTJi",
                doc="Chat ID/URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"
            ),
            ConfigField(
                "CHECK_INTERVAL",
                default=300,
                doc="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"
            )
        )
        self.tracked_users = {}
        self.activity_log = []
        self.scheduler = None

    async def client_ready(self, client, db):
        self.db = db
        self.tracked_users = self.db.get(__name__, "tracked_users", {})
        self.scheduler = asyncio.create_task(self._daily_report_loop())

    def save_state(self):
        self.db.set(__name__, "tracked_users", self.tracked_users)

    @loader.watcher(outgoing=False, incoming=True)
    async def user_watcher(self, message):
        sender = await message.get_sender()
        if not sender or not sender.id in self.tracked_users:
            return

        user_id = sender.id
        chat = await message.get_chat()
        chat_id = message.chat_id
        chat_title = getattr(chat, "title", "–õ–°")

        now = datetime.now()

        entry = {
            "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
            "event_type": "message" if not message.edit_date else "edit",
            "chat_id": chat_id,
            "chat_title": chat_title,
            "message": message.message[:100].replace("\n", " ") if message.message else "-"
        }

        self.activity_log.append(entry)

        user_data = self.tracked_users[user_id]
        user_data["last_online"] = now
        user_data.setdefault("messages_count", 0)
        user_data["messages_count"] += 1
        user_data.setdefault("chats_activity", {})
        user_data["chats_activity"].setdefault(chat_title, 0)
        user_data["chats_activity"][chat_title] += 1

        self.tracked_users[user_id] = user_data
        self.save_state()

    async def _daily_report_loop(self):
        while True:
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
            for user_id in self.tracked_users:
                await self._send_report(user_id)

    async def _send_report(self, user_id):
        user = await self._get_user(user_id)
        data = self.tracked_users[user_id]
        now = datetime.now()
        last_online = data.get("last_online", now)
        delta = now - last_online
        messages = data.get("messages_count", 0)
        chats = data.get("chats_activity", {})

        lines = [
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {now.date()}",
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name}",
            f"üïí –û–Ω–ª–∞–π–Ω: {delta}",
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {messages}",
            f"üåê –ß–∞—Ç—ã:"
        ]
        for chat, count in chats.items():
            lines.append(f" ‚Ä¢ {chat} (messages: {count})")
        lines.append(f"üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_online}")

        csv_buffer = io.StringIO()
        writer = csv.DictWriter(csv_buffer, fieldnames=["timestamp", "event_type", "chat_id", "chat_title", "message"])
        writer.writeheader()
        for row in self.activity_log:
            if int(user_id) == int(user_id):  # –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ ID
                writer.writerow(row)

        csv_bytes = io.BytesIO(csv_buffer.getvalue().encode("utf-8"))
        csv_bytes.name = f"report_{user_id}_{now.date()}.csv"
        chat = self.config["REPORT_CHAT"]

        await self._send_report_to(chat, "\n".join(lines), csv_bytes)

    async def _send_report_to(self, chat, text, file=None):
        try:
            await self.client.send_file(chat, file=file, caption=text)
        except Exception as e:
            await self.client.send_message(chat, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")

    async def _get_user(self, user):
        return await self.client.get_entity(user)

    @loader.command()
    async def addtrack(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: .addtrack @user"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        try:
            user = await self._get_user(args[0])
            self.tracked_users[user.id] = {
                "last_online": datetime.now(),
                "messages_count": 0,
                "chats_activity": {}
            }
            self.save_state()
            await utils.answer(message, f"–î–æ–±–∞–≤–ª–µ–Ω {user.id} (@{user.username}) –≤ —Ç—Ä–µ–∫–∏–Ω–≥.")
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞: {e}")

    @loader.command()
    async def deltrack(self, message):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: .deltrack @user"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        try:
            user = await self._get_user(args[0])
            if user.id in self.tracked_users:
                self.tracked_users.pop(user.id)
                self.save_state()
                await utils.answer(message, f"–£–¥–∞–ª—ë–Ω {user.id} (@{user.username}) –∏–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞.")
            else:
                await utils.answer(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞: {e}")

    @loader.command()
    async def tracklist(self, message):
        """–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.tracked_users:
            return await utils.answer(message, "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        text = "\n".join([f"- {uid}" for uid in self.tracked_users])
        await utils.answer(message, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}")

    @loader.command()
    async def report(self, message):
        """–†—É—á–Ω–æ–π –æ—Ç—á–µ—Ç: .report @user"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        try:
            user = await self._get_user(args[0])
            if user.id in self.tracked_users:
                await self._send_report(user.id)
                await utils.answer(message, "–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                await utils.answer(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞: {e}")
