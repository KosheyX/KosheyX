from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class FontStyleMod(loader.Module):
    """‚úçÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    strings = {
        "name": "FontStyle",
        "on": "üü¢ <b>–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –≤–∫–ª—é—á–µ–Ω:</b> {}",
        "off": "üî¥ <b>–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω</b>",
        "current": "‚úèÔ∏è <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:</b> {}",
        "help": (
            "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>.font bold</code> - –∂–∏—Ä–Ω—ã–π\n"
            "<code>.font italic</code> - –∫—É—Ä—Å–∏–≤\n"
            "<code>.font mono</code> - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π\n"
            "<code>.font off</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–∏–ª—å\n"
            "<code>.font</code> - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
        ),
        "error": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å! –î–æ—Å—Ç—É–ø–Ω–æ: bold/italic/mono"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "active_style",
                None,
                "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞",
                validator=loader.validators.Choice(["bold", "italic", "mono", None])
            )
        )

    async def client_ready(self, client, db):
        self._client = client

    async def fontcmd(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏ —à—Ä–∏—Ñ—Ç–æ–≤"""
        args = utils.get_args_raw(message)
        
        if not args:
            style = self.config["active_style"]
            status = style if style else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await utils.answer(message, self.strings["current"].format(status))
            return
        
        if args.lower() == "off":
            self.config["active_style"] = None
            await utils.answer(message, self.strings["off"])
            return
        
        if args.lower() not in ["bold", "italic", "mono"]:
            await utils.answer(message, self.strings["error"])
            return
        
        self.config["active_style"] = args.lower()
        await utils.answer(message, self.strings["on"].format(args.lower()))

    async def watcher(self, message: Message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª—å –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        if not isinstance(message, Message) or message.out is False:
            return
        
        if not self.config["active_style"]:
            return
        
        style = self.config["active_style"]
        original_text = message.raw_text
        
        if not original_text:
            return
        
        styled_text = self._apply_style(original_text, style)
        await message.edit(styled_text)

    def _apply_style(self, text: str, style: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫ —Ç–µ–∫—Å—Ç—É"""
        styles = {
            "bold": lambda t: f"<b>{t}</b>",
            "italic": lambda t: f"<i>{t}</i>",
            "mono": lambda t: f"<code>{t}</code>"
        }
        return styles[style](text)
