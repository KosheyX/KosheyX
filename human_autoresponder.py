from .. import loader, utils
from telethon.tl.types import Message, User
import time
import random

@loader.tds
class StyledAutoResponderMod(loader.Module):
    """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞"""
    strings = {
        "name": "StyledAutoResponder",
        "config_text": "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É)",
        "config_delay": "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ (–º–∏–Ω—É—Ç—ã)",
        "config_font": "–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ (normal/bold/italic/cursive)",
        "config_color": "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (hex-–∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)",
        "status": "‚úçÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                 "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n"
                 "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} –º–∏–Ω\n"
                 "‚Ä¢ –°—Ç–∏–ª—å: {font}\n"
                 "‚Ä¢ –¶–≤–µ—Ç: {color}\n"
                 "‚Ä¢ –¢–µ–∫—Å—Ç: {text}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "text",
                "<i>–Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç</i>, <b>–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ</b> ‚ú®",
                lambda: self.strings["config_text"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "delay",
                30,
                lambda: self.strings["config_delay"],
                validator=loader.validators.Integer(minimum=1)
            ),
            loader.ConfigValue(
                "font",
                "normal",
                lambda: self.strings["config_font"],
                validator=loader.validators.Choice(["normal", "bold", "italic", "cursive"])
            ),
            loader.ConfigValue(
                "color",
                "default",
                lambda: self.strings["config_color"],
                validator=loader.validators.String()
            ),
        )
        self.active = False
        self.last_reply = {}

    async def client_ready(self, client, db):
        self._client = client

    async def arcmd(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º"""
        args = utils.get_args_raw(message)
        
        if not args:
            status = "‚úÖ <b>–≤–∫–ª—é—á–µ–Ω</b>" if self.active else "‚ùå <b>–≤—ã–∫–ª—é—á–µ–Ω</b>"
            await utils.answer(
                message,
                self.strings["status"].format(
                    status=status,
                    delay=self.config["delay"],
                    font=self.config["font"],
                    color=self.config["color"],
                    text=self.config["text"]
                )
            )
            return

        if args.lower() in ["on", "–≤–∫–ª"]:
            self.active = True
            await utils.answer(message, "üü¢ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>")
        elif args.lower() in ["off", "–≤—ã–∫–ª"]:
            self.active = False
            await utils.answer(message, "üî¥ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>")
        elif args.isdigit():
            self.config["delay"] = int(args)
            await utils.answer(message, f"‚è± <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞</b> <code>{args}</code> <b>–º–∏–Ω—É—Ç</b>")
        else:
            self.config["text"] = args
            await utils.answer(message, "‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:</b>\n" + args)

    def _apply_style(self, text):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —Ç–µ–∫—Å—Ç—É"""
        styles = {
            "bold": lambda t: f"<b>{t}</b>",
            "italic": lambda t: f"<i>{t}</i>",
            "cursive": lambda t: f"<i>{t}</i>",  # –î–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ cursive = italic
        }
        
        if self.config["font"] != "normal":
            text = styles[self.config["font"]](text)
        
        if self.config["color"] != "default":
            text = f'<span color="{self.config["color"]}">{text}</span>'
        
        return text

    async def watcher(self, message: Message):
        if not self.active or not isinstance(message, Message):
            return

        try:
            user = await message.get_sender()
            if not isinstance(user, User) or user.bot or user.is_self:
                return
        except:
            return

        now = time.time()
        if now - self.last_reply.get(user.id, 0) < self.config["delay"] * 60:
            return

        styled_text = self._apply_style(self.config["text"])
        await message.reply(styled_text, parse_mode="HTML")
        self.last_reply[user.id] = now
