from .. import loader, utils
from telethon.tl.types import Message, User
import time
import random

@loader.tds
class StyledAutoResponderMod(loader.Module):
    """‚ú® –°—Ç–∏–ª—å–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –õ–° –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    strings = {
        "name": "üí¨ StyledAutoResponder",
        "config_text": "üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)",
        "config_delay": "‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)",
        "config_font": "üî§ –°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞",
        "config_color": "üé® –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞",
        "status": (
            "‚öôÔ∏è <b><u>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞</u></b>\n\n"
            "‚ñ´Ô∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status}\n"
            "‚ñ´Ô∏è <b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay} –º–∏–Ω\n"
            "‚ñ´Ô∏è <b>–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞:</b> {font}\n"
            "‚ñ´Ô∏è <b>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞:</b> {color}\n\n"
            "üìå <b>–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:</b>\n{text}\n\n"
            "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π .ar help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</i>"
        ),
        "help": (
            "üõ† <b><u>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</u></b>\n\n"
            "<code>.ar</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "<code>.ar on/off</code> - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n"
            "<code>.ar —Ç–µ–∫—Å—Ç</code> - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞\n"
            "<code>.ar 10</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É (10 –º–∏–Ω)\n"
            "<code>.ar font bold</code> - –∏–∑–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç\n"
            "<code>.ar color #FF0000</code> - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç\n\n"
            "üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:</b>\n"
            "- HEX-–∫–æ–¥ (<code>#FF0000</code> - –∫—Ä–∞—Å–Ω—ã–π)\n"
            "- –ù–∞–∑–≤–∞–Ω–∏–µ (<code>red</code>, <code>blue</code>)\n"
            "- <code>default</code> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n\n"
            "üî§ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã:</b>\n"
            "- <code>normal</code> - –æ–±—ã—á–Ω—ã–π\n"
            "- <code>bold</code> - –∂–∏—Ä–Ω—ã–π\n"
            "- <code>italic</code> - –∫—É—Ä—Å–∏–≤\n"
            "- <code>cursive</code> - —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π"
        ),
        "font_set": "‚úèÔ∏è –®—Ä–∏—Ñ—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{font}</b>",
        "color_set": "üé® –¶–≤–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <code>{color}</code>",
        "examples": (
            "üñå <b><u>–ü—Ä–∏–º–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</u></b>\n\n"
            "<b>–ñ–∏—Ä–Ω—ã–π</b>: <code>.ar font bold</code>\n"
            "<i>–ö—É—Ä—Å–∏–≤</i>: <code>.ar font italic</code>\n"
            "<span color='#FF0000'>–ö—Ä–∞—Å–Ω—ã–π</span>: <code>.ar color #FF0000</code>\n"
            "<span color='#00FF00'>–ó–µ–ª—ë–Ω—ã–π</span>: <code>.ar color green</code>\n"
            "<b><i>–ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</i></b>: –∫–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–∏–ª–∏"
        )
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "text",
                "ü§ñ <i>–Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç</i>, <b>–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ</b> ‚ú®",
                lambda: self.strings["config_text"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "delay",
                30,
                lambda: self.strings["config_delay"],
                validator=loader.validators.Integer(minimum=1)
            ),
            loader.ConfigValue(
                "font",
                "normal",
                lambda: self.strings["config_font"],
                validator=loader.validators.Choice(["normal", "bold", "italic", "cursive"])
            ),
            loader.ConfigValue(
                "color",
                "default",
                lambda: self.strings["config_color"],
                validator=loader.validators.String()
            ),
        )
        self.active = False
        self.last_reply = {}

    async def client_ready(self, client, db):
        self._client = client

    async def arcmd(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π .ar help"""
        args = utils.get_args_raw(message)
        
        if not args:
            status = "üü¢ <b>–≤–∫–ª—é—á–µ–Ω</b>" if self.active else "üî¥ <b>–≤—ã–∫–ª—é—á–µ–Ω</b>"
            color_display = (
                f"<span color='{self.config['color']}'>{self.config['color']}</span>" 
                if self.config["color"] != "default" 
                else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
            )
            await utils.answer(
                message,
                self.strings["status"].format(
                    status=status,
                    delay=self.config["delay"],
                    font=self.config["font"],
                    color=color_display,
                    text=self.config["text"]
                )
            )
            return

        args_lower = args.lower()
        
        if args_lower == "help":
            await utils.answer(message, self.strings["help"])
        elif args_lower == "examples":
            await utils.answer(message, self.strings["examples"])
        elif args_lower in ["on", "–≤–∫–ª"]:
            self.active = True
            await utils.answer(message, "üü¢ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>")
        elif args_lower in ["off", "–≤—ã–∫–ª"]:
            self.active = False
            await utils.answer(message, "üî¥ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>")
        elif args_lower.startswith("font "):
            font = args[5:].lower()
            if font in ["normal", "bold", "italic", "cursive"]:
                self.config["font"] = font
                await utils.answer(message, self.strings["font_set"].format(font=font))
            else:
                await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π <code>.ar help</code> –¥–ª—è —Å–ø–∏—Å–∫–∞")
        elif args_lower.startswith("color "):
            color = args[6:]
            self.config["color"] = color
            await utils.answer(message, self.strings["color_set"].format(color=color))
        elif args.isdigit():
            self.config["delay"] = int(args)
            await utils.answer(message, f"‚è± <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞</b> <code>{args}</code> <b>–º–∏–Ω—É—Ç</b>")
        else:
            self.config["text"] = args
            await utils.answer(message, "‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω:</b>\n" + args)

    def _apply_style(self, text):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —Ç–µ–∫—Å—Ç—É"""
        styles = {
            "bold": lambda t: f"<b>{t}</b>",
            "italic": lambda t: f"<i>{t}</i>",
            "cursive": lambda t: f"<i>{t}</i>",
        }
        
        if self.config["font"] != "normal":
            text = styles[self.config["font"]](text)
        
        if self.config["color"] != "default":
            text = f'<span color="{self.config["color"]}">{text}</span>'
        
        return text

    async def watcher(self, message: Message):
        if not self.active or not isinstance(message, Message):
            return

        try:
            user = await message.get_sender()
            if not isinstance(user, User) or user.bot or user.is_self:
                return
        except:
            return

        is_private = message.is_private
        mentions_me = f"@{self._client.me.username}" in message.text if self._client.me.username else False
        
        if not is_private and not mentions_me:
            return

        now = time.time()
        if now - self.last_reply.get(user.id, 0) < self.config["delay"] * 60:
            return

        styled_text = self._apply_style(self.config["text"])
        await message.reply(styled_text, parse_mode="HTML")
        self.last_reply[user.id] = now
