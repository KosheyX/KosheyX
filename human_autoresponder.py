from .. import loader, utils
from telethon.tl.types import Message, User
import time

@loader.tds
class StyledAutoResponderMod(loader.Module):
    """‚ú® –°—Ç–∏–ª—å–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –õ–° –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    strings = {
        "name": "StyledAutoResponder",
        "config_text": "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)",
        "config_delay": "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)",
        "status": (
            "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
            "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} –º–∏–Ω\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç: {text}"
        ),
        "activated": "üü¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        "deactivated": "üî¥ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "text",
                "ü§ñ –Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ ‚ú®",
                lambda: self.strings["config_text"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "delay",
                30,
                lambda: self.strings["config_delay"],
                validator=loader.validators.Integer(minimum=1)
            ),
        )
        self.active = False
        self.last_reply = {}
        self._me = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ client_ready

    async def client_ready(self, client, db):
        self._client = client
        self._me = await client.get_me()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ

    async def arcmd(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º"""
        args = utils.get_args_raw(message)
        
        if not args:
            status = self.strings["activated"] if self.active else self.strings["deactivated"]
            await utils.answer(
                message,
                self.strings["status"].format(
                    status=status,
                    delay=self.config["delay"],
                    text=self.config["text"]
                )
            )
            return

        if args.lower() in ["on", "–≤–∫–ª"]:
            self.active = True
            await utils.answer(message, self.strings["activated"])
        elif args.lower() in ["off", "–≤—ã–∫–ª"]:
            self.active = False
            await utils.answer(message, self.strings["deactivated"])
        elif args.isdigit():
            self.config["delay"] = int(args)
            await utils.answer(message, f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {args} –º–∏–Ω—É—Ç")
        else:
            self.config["text"] = args
            await utils.answer(message, f"‚úèÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {args}")

    async def watcher(self, message: Message):
        if not self.active or not isinstance(message, Message):
            return

        try:
            user = await message.get_sender()
            if not isinstance(user, User) or user.bot or user.is_self:
                return
        except:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–∞–º
        is_private = message.is_private
        mentions_me = (self._me.username and 
                      f"@{self._me.username}" in (message.text or ""))
        
        if not is_private and not mentions_me:
            return

        now = time.time()
        if now - self.last_reply.get(user.id, 0) < self.config["delay"] * 60:
            return

        await message.reply(self.config["text"], parse_mode="HTML")
        self.last_reply[user.id] = now
