import re
import logging
from datetime import datetime
from hikkatl.types import Message
from hikkatl import functions, types
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class UltimateAntiSpam(loader.Module):
    """–ú–æ—â–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""

    strings = {
        "name": "UltimateAntiSpamPro",
        "banned": "üîí <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "log_msg": (
            "üìõ <b>–õ–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>\n\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "‚è∞ –í—Ä–µ–º—è: {time}\n"
            "üîû –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{msg}</code>"
        ),
        "already_banned": "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "history_cleared": "üßπ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞",
        "user_not_found": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "spam_detected": "üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º! –ü—Ä–∏–Ω—è—Ç—ã –º–µ—Ä—ã."
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "ban_users", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "delete_messages", True, "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
            "delete_history", True, "–£–¥–∞–ª—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            "report_to_chat", True, "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã",
            "max_links", 2, "–ú–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
            "check_adult", True, "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å NSFW –∫–æ–Ω—Ç–µ–Ω—Ç",
            "check_malware", True, "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û"
        )
        self._ban_count = 0
        self._patterns = self._build_patterns()

    def _build_patterns(self):
        return {
            "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è": (
                r"(?i)\b(–ø–æ—Ä–Ω–æ|porn|xxx|—Å–µ–∫—Å|üîû|onlyfans|nsfw|—ç—Ä–æ—Ç–∏–∫[–∞–∏]?|"
                r"–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ|–∏–Ω—Ç–∏–º|–æ–±–Ω–∞–∂[–µ—ë]–Ω–Ω?|–≥–æ–ª[—ã—ñ]–π|—Ä–∞–∑–¥–µ–≤–∞–π—Å—è|"
                r"—Å–æ—Å–∏|–ø–æ—Ä–Ω—É—Ö–∞|–ø–æ—Ä–Ω—É—à–∫|–ø–æ—Ä–Ω—è—à–∫)\b"
                r"(?<!—Å–µ–∫—Å-|–ø—Å–∏—Ö–æ|–∏—Å—Ç–æ—Ä–∏—è|–º–µ—Ç–æ–¥–∏–∫–∞|–ª–µ–∫—Ü–∏–∏|—Ç–µ—Ä–∞–ø–∏|–∞–Ω–∞–ª–∏–∑)"
            ),
            "–†–µ–∫–ª–∞–º–∞": (
                r"(?i)(\b(–ø–æ–¥–ø–∏—à–∏—Å—å|–∫–∞–Ω–∞–ª|—Ä–µ–∫–ª–∞–º–∞|casino|–∫–∞–∑–∏–Ω[–æ–∞]|–∫—É–ø–ª—é|"
                r"–ø—Ä–æ–¥–∞–º|—Å–∫–∏–¥–∫[–∞–∏]|–∞–∫—Ü–∏[—è–∏]|–ø—Ä–æ–º–æ–∫–æ–¥|—Ä–∞—Å–∫—Ä—É—Ç–∫[–∞–∏]|"
                r"–Ω–∞–∫—Ä—É—Ç–∫[–∞–∏]|–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–±–∏—Ä–∂–∞|–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏|–∫—Ä–∏–ø—Ç–∞|"
                r"—Å—Ç–∞–≤–∫[–∞–∏]|–ª–æ—Ç–µ—Ä–µ—è)\b"
                r"|[\U0001F4B0-\U0001F4B8üíµüí∞üìàüí∏ü§ë]"
                r"|(?:\b–±–µ—Å–ø–ª–∞—Ç–Ω–æ\b.*\b–≤—ã–≥–æ–¥–Ω–æ\b)"
                r"|(?:\b—Å—Ä–æ—á–Ω–æ\b.*\b–∫—É–ø[–∏—å]\b))"
            ),
            "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ": (
                r"(?i)(?:bit\.ly|tinyurl|goo\.gl|—Å–∫–∞—á–∞[–π–∏]|"
                r"\.exe|\b–≤–∏—Ä—É—Å\b|–≤—Ä–µ–¥–æ–Ω–æ—Å|–≤–∑–ª–æ–º|–∫—Ä—è–∫|—Ñ–∏—à–∏–Ω–≥|"
                r"malware|—Å–ø–∞–º|–±–æ—Ç–Ω–µ—Ç|—à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫|—Ä—É—Ç–∫–∏—Ç)"
                r"|(?:https?://[^\s]*?(casino|—Ä—É–ª–µ—Ç–∫|—Å–∫–∞—á–∞—Ç—å|virus))"
            ),
            "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã": (
                r"(?:https?://[^\s]*?){3,}|"
                r"([!?#$%^&]{4,})|"
                r"(\b\w+\b\s*?){3,}\1|"
                r"\b[a-z0-9]{20,}\b"
            )
        }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            self._log_chat = await self.client.get_entity("https://t.me/+ve_fxQ6dYj9hOTJi")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞: %s", e)
            self._log_chat = None

    async def is_user_blocked(self, user_id: int) -> bool:
        try:
            blocked = await self.client(functions.contacts.GetBlockedRequest(offset=0, limit=100))
            return any(
                user.peer.user_id == user_id if hasattr(user, 'peer') 
                else user.id == user_id 
                for user in getattr(blocked, 'blocked', [])
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: %s", e)
            return False

    async def block_user_ultimate(self, user_id: int):
        try:
            if await self.is_user_blocked(user_id):
                return "already_banned"
            
            for _ in range(3):
                try:
                    user = await self.client.get_entity(types.PeerUser(user_id))
                    await self.client(functions.contacts.BlockRequest(
                        id=types.InputPeerUser(
                            user_id=user.id,
                            access_hash=user.access_hash
                        )
                    ))
                    return "success"
                except (ValueError, TypeError):
                    await self.client(functions.contacts.BlockRequest(
                        id=types.InputPeerUser(user_id=user_id, access_hash=0)
                    ))
                    return "success"
                except Exception as e:
                    logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ %d: %s", user_id, e)
                    await asyncio.sleep(1)
            
            return "error"
        except Exception as e:
            logger.error("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: %s", e)
            return "error"

    async def delete_history_ultimate(self, user_id: int):
        try:
            user = await self.client.get_entity(types.PeerUser(user_id))
            await self.client(functions.messages.DeleteHistoryRequest(
                peer=types.InputPeerUser(
                    user_id=user.id,
                    access_hash=user.access_hash
                ),
                max_id=0,
                revoke=True
            ))
            return True
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %s", e)
            return False

    async def _check_message(self, text: str) -> str:
        if len(re.findall(r"https?://", text)) > self.config["max_links"]:
            return "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"
        
        for category, pattern in self._patterns.items():
            if not self.config[f"check_{category.split()[0].lower()}"]:
                continue
            if re.search(pattern, text, flags=re.IGNORECASE):
                return category
        
        if self.config["check_adult"] and any(
            kw in text.lower() for kw in {"üîû", "nsfw", "18+", "–ø–æ—Ä–Ω–æ"}
        ):
            return "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è"
        
        return ""

    async def process_message(self, message: Message):
        if not message.is_private or message.out:
            return

        text = utils.get_raw_text(message)
        if not text:
            return

        reason = await self._check_message(text)
        if not reason:
            return

        user_id = message.sender_id
        response = []
        
        if self.config["ban_users"]:
            status = await self.block_user_ultimate(user_id)
            if status == "already_banned":
                response.append(self.strings["already_banned"])
            elif status == "error":
                response.append(self.strings["user_not_found"])
        
        if self.config["delete_messages"]:
            try:
                await message.delete()
            except Exception as e:
                logger.warning("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %s", e)
        
        if self.config["delete_history"]:
            if await self.delete_history_ultimate(user_id):
                response.append(self.strings["history_cleared"])
        
        if self.config["report_to_chat"] and self._log_chat:
            try:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ 205 —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
                await self.client.send_message(
                    self._log_chat,
                    self.strings["log_msg"].format(
                        user_id=user_id,
                        time=datetime.now().strftime("%d.%m.%Y %H:%M"),
                        reason=reason,
                        msg=utils.escape_html(text[:500])
                    )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è format
                )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è send_message
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: %s", e)
        
        final_response = "\n".join(filter(None, [
            self.strings["spam_detected"],
            *response,
            self.strings["banned"].format(reason=reason)
        ]))
        
        await utils.answer(message, final_response)
        self._ban_count += 1

    async def watcher(self, message: Message):
        await self.process_message(message)

    async def uastatcmd(self, message: Message):
        stats = (
            "üìä <b>UltimateAntiSpam Pro Stats</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {self._ban_count}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            f"  - NSFW: {'‚úÖ' if self.config['check_adult'] else '‚ùå'}\n"
            f"  - –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ: {'‚úÖ' if self.config['check_malware'] else '‚ùå'}\n"
            f"  - –ú–∞–∫—Å. —Å—Å—ã–ª–æ–∫: {self.config['max_links']}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            f"  - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {'‚úÖ' if self.config['ban_users'] else '‚ùå'}\n"
            f"  - –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {'‚úÖ' if self.config['delete_history'] else '‚ùå'}"
        )
        await utils.answer(message, stats)
