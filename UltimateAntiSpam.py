import re
import logging
import time
from datetime import datetime
from typing import List, Optional

from hikkatl.types import Message, Document
from hikkatl.tl.types import (
    MessageEntityUrl,
    MessageEntityTextUrl,
    DocumentAttributeFilename,
)
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class UltimateAntiSpamMod(loader.Module):
    """üîí Ultimate –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –≤ –õ–° —Å –æ—Ç—á–µ—Ç–∞–º–∏ –≤ —á–∞—Ç"""

    strings = {
        "name": "UltimateAntiSpam",
        "banned": "üö® <b>{user} –∑–∞–±–∞–Ω–µ–Ω –≤ –õ–°!</b>\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
        "deleted": "üóë <i>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.</i>",
        "report_msg": (
            "üö® <b>–ù–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –õ–°!</b>\n\n"
            "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user}\n"
            "üÜî <b>ID:</b> <code>{user_id}</code>\n"
            "üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
            "üîç <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            "‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{message_preview}</code>"
        ),
        "log_chat_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç –ª–æ–≥–æ–≤",
    }

    def __init__(self):
        self._ban_count = 0
        self._last_ban_time = None
        self.config = loader.ModuleConfig(
            "ban_users", True, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–Ω–∏—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π",
            "delete_messages", True, "–£–¥–∞–ª—è—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "log_to_channel", True, "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –≤ —á–∞—Ç",
            "antiporn", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—é",
            "antispam", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É",
            "antilinks", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏",
            "antifiles", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã",
            "flood_control", 5, "–ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –¥–ª—è —Ñ–ª—É–¥–∞",
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self._flood_control = {}
        
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try:
            self._log_chat = await self.client.get_entity("https://t.me/+ve_fxQ6dYj9hOTJi")
            logger.info(f"–ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self._log_chat.title} (ID: {self._log_chat.id})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            self._log_chat = None

    async def is_dm(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –õ–°."""
        return message.is_private and not message.out

    async def check_content(self, message: Message) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è."""
        text = (message.text or message.raw_text or "").lower()

        # üîû –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è
        if self.config["antiporn"]:
            porn_triggers = [
                r"–ø–æ—Ä–Ω–æ|porn|xxx|onlyfans|—Å–µ–∫—Å|—Å–∏—Å—å–∫–∏|–≥–æ–ª—ã–µ|nude|üîû|üçë|üíã|üçí",
                r"—Å–µ–∫—Å|–ø–æ—Ä–Ω–æ|–æ–±–Ω–∞–∂|–≥–æ–ª–∞—è|–ø–æ—Ä–Ω|–∏–Ω—Ç–∏–º|fuck|dick|pussy",
            ]
            for trigger in porn_triggers:
                if re.search(trigger, text, re.IGNORECASE):
                    return "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è"

        # üì¢ –†–µ–∫–ª–∞–º–∞
        if self.config["antispam"]:
            spam_triggers = [
                r"–ø–æ–¥–ø–∏—à–∏—Å—å|–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è|–∫–∞–Ω–∞–ª|–≥—Ä—É–ø–ø–∞|—á–∞—Ç|–∫—É–ø–∏—Ç—å|–ø—Ä–æ–¥–∞–º|–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                r"—Ä–µ–∫–ª–∞–º–∞|@[a-z0-9_]{5,}|t\.me/|telegram\.me/|–æ–ø–ª–∞—Ç–∞|–∑–∞–∫–∞–∑–∞—Ç—å",
            ]
            for trigger in spam_triggers:
                if re.search(trigger, text, re.IGNORECASE):
                    return "–†–µ–∫–ª–∞–º–∞"

        # ‚ö†Ô∏è –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        if self.config["antilinks"]:
            malicious_domains = [
                r"bit\.ly|tinyurl\.com|shorte\.st|—Å–∫–∞—á–∞—Ç—å\-–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                r"steamcommunity\.com/login|discord\.gift|free-minecraft\.ru",
            ]
            urls = await self.extract_urls(message)
            for url in urls:
                for domain in malicious_domains:
                    if re.search(domain, url, re.IGNORECASE):
                        return "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞"

        # üìÅ –û–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if self.config["antifiles"] and message.file:
            for attr in message.file.attributes:
                if isinstance(attr, DocumentAttributeFilename):
                    if re.search(r"\.exe|\.bat|\.js|\.scr|\.vbs$", attr.file_name, re.I):
                        return "–û–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª"

        # üí¨ –§–ª—É–¥
        if self.config["flood_control"] > 0:
            user_id = message.sender_id
            now = time.time()
            if user_id not in self._flood_control:
                self._flood_control[user_id] = []
            self._flood_control[user_id].append(now)
            self._flood_control[user_id] = [t for t in self._flood_control[user_id] if now - t < 60]
            if len(self._flood_control[user_id]) > self.config["flood_control"]:
                return "–§–ª—É–¥"

        return None

    async def extract_urls(self, message: Message) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        urls = []
        text = message.text or message.raw_text or ""
        if message.entities:
            for entity in message.entities:
                if isinstance(entity, (MessageEntityUrl, MessageEntityTextUrl)):
                    urls.append(text[entity.offset:entity.offset + entity.length])
        else:
            urls.extend(re.findall(r"https?://[^\s]+", text))
        return urls

    async def ban_user(self, message: Message, reason: str):
        """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç."""
        user = await message.get_sender()
        self._ban_count += 1
        self._last_ban_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            if self.config["ban_users"]:
                await self.client.edit_permissions(
                    user.id,
                    view_messages=False,
                )
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.config["delete_messages"]:
                await message.delete()

            # –û—Ç—á–µ—Ç –≤ —á–∞—Ç –ª–æ–≥–æ–≤
            if self.config["log_to_channel"] and self._log_chat:
                try:
                    await self.client.send_message(
                        entity=self._log_chat.id if hasattr(self._log_chat, 'id') else self._log_chat,
                        message=self.strings("report_msg").format(
                            user=utils.escape_html(user.first_name),
                            user_id=user.id,
                            date=self._last_ban_time,
                            reason=reason,
                            message_preview=utils.escape_html((message.text or "")[:100]),
                        ),
                        silent=True
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
                    await utils.answer(message, self.strings("log_chat_error"))

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
            await utils.answer(
                message,
                self.strings("banned").format(
                    user=utils.escape_html(user.first_name),
                    reason=reason,
                ),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")

    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –õ–°."""
        if not await self.is_dm(message):
            return

        reason = await self.check_content(message)
        if reason:
            await self.ban_user(message, reason)

    async def uascmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–Ω–æ–≤"""
        stats = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫</b>\n\n"
            f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞–±–∞–Ω–µ–Ω–æ:</b> <code>{self._ban_count}</code>\n"
            f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω:</b> <code>{self._last_ban_time or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</code>\n"
            f"üìù <b>–ß–∞—Ç –ª–æ–≥–æ–≤:</b> {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if hasattr(self, '_log_chat') and self._log_chat else '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}"
        )
        await utils.answer(message, stats)
