import re
import logging
from datetime import datetime
from hikkatl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class AntiSpamDMLogs(loader.Module):
    """–ê–Ω—Ç–∏—Å–ø–∞–º —Å –ª–æ–≥–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""

    strings = {
        "name": "AntiSpamDMLogs",
        "banned": "üö® <b>–ó–∞–±–∞–Ω–µ–Ω –≤ –õ–°!</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "log_msg": (
            "üõ° <b>–õ–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –õ–°</b>\n\n"
            "üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {user}\n"
            "üÜî <b>ID:</b> <code>{user_id}</code>\n"
            "‚è∞ <b>–í—Ä–µ–º—è:</b> {time}\n"
            "üîû <b>–¢—Ä–∏–≥–≥–µ—Ä:</b> {reason}\n"
            "üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{msg_preview}</code>"
        ),
        "chat_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ —á–∞—Ç",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "ban_users", True, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–Ω–∏—Ç—å",
            "delete_messages", True, "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        )
        self._log_chat_link = "https://t.me/+ve_fxQ6dYj9hOTJi"  # –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤–∞—à —á–∞—Ç

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            self._log_chat = await client.get_entity(self._log_chat_link)
            logger.success(f"–ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self._log_chat.title}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É: {e}")
            self._log_chat = None

    async def detect_triggers(self, message: Message) -> str:
        text = (message.text or "").lower()
        triggers = {
            "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è": r"–ø–æ—Ä–Ω–æ|porn|xxx|onlyfans|—Å–µ–∫—Å|üîû|üçë|nude",
            "–†–µ–∫–ª–∞–º–∞": r"–ø–æ–¥–ø–∏—à–∏—Å—å|–∫–∞–Ω–∞–ª|–∫—É–ø–∏—Ç—å|—Ä–µ–∫–ª–∞–º–∞|@[a-z0-9_]{5,}|t\.me/",
            "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ": r"bit\.ly|—Å–∫–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ|\.exe|\.js|–≤–∏—Ä—É—Å"
        }
        for reason, pattern in triggers.items():
            if re.search(pattern, text, re.IGNORECASE):
                return reason
        return None

    async def ban_and_log(self, message: Message, reason: str):
        user = await message.get_sender()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if self.config["ban_users"]:
            await self.client.edit_permissions(
                user.id,
                view_messages=False,
            )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.config["delete_messages"]:
            await message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ —á–∞—Ç
        if self._log_chat:
            try:
                await self.client.send_message(
                    entity=self._log_chat,
                    message=self.strings("log_msg").format(
                        user=utils.escape_html(user.first_name),
                        user_id=user.id,
                        time=datetime.now().strftime("%d.%m.%Y %H:%M"),
                        reason=reason,
                        msg_preview=utils.escape_html((message.text or "")[:100])
                    )
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
                await utils.answer(message, self.strings("chat_error"))

        await utils.answer(message, self.strings("banned").format(reason=reason))

    async def watcher(self, message: Message):
        if not message.is_private or message.out:
            return
            
        if reason := await self.detect_triggers(message):
            await self.ban_and_log(message, reason)

    async def aspamcmd(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
        status = (
            "üîß <b>AntiSpamDMLogs Status</b>\n\n"
            f"‚Ä¢ –ß–∞—Ç –ª–æ–≥–æ–≤: {'‚úÖ ' + self._log_chat.title if self._log_chat else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–±–∞–Ω–µ–Ω–æ: {getattr(self, '_ban_count', 0)}"
        )
        await utils.answer(message, status)
