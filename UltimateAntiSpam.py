import re
import logging
from datetime import datetime
from hikkatl.types import Message
from hikkatl import functions, types
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class UltimateAntiSpam(loader.Module):
    """–ê–Ω—Ç–∏—Å–ø–∞–º –±–µ–∑ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤"""

    strings = {
        "name": "UltimateAntiSpam",
        "banned": "üîí <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "log_msg": (
            "üìõ <b>–õ–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>\n\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "‚è∞ –í—Ä–µ–º—è: {time}\n"
            "üîû –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{msg}</code>"
        ),
        "already_banned": "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "history_cleared": "üßπ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞",
        "user_not_found": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "ban_users", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "delete_messages", True, "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
            "delete_history", True, "–£–¥–∞–ª—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            "report_to_chat", True, "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã"
        )
        self._ban_count = 0

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            self._log_chat = await self.client.get_entity("https://t.me/+ve_fxQ6dYj9hOTJi")
            logger.info("–ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞: %s", e)
            self._log_chat = None

    async def is_user_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫"""
        try:
            blocked = await self.client(functions.contacts.GetBlockedRequest(
                offset=0,
                limit=100
            ))
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Telegram API
            if hasattr(blocked, 'blocked'):
                for user in blocked.blocked:
                    if hasattr(user, 'peer') and hasattr(user.peer, 'user_id'):
                        if user.peer.user_id == user_id:
                            return True
                    elif hasattr(user, 'id'):
                        if user.id == user_id:
                            return True
            return False
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: %s", e)
            return False

    async def block_user_ultimate(self, user_id: int):
        """–ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–∞–¥–µ–∂–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"""
        try:
            if await self.is_user_blocked(user_id):
                return "already_banned"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                user = await self.client.get_entity(types.PeerUser(user_id))
                await self.client(functions.contacts.BlockRequest(
                    id=types.InputPeerUser(
                        user_id=user.id,
                        access_hash=user.access_hash
                    )
                ))
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_hash, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
                await self.client(functions.contacts.BlockRequest(
                    id=types.InputPeerUser(user_id=user_id, access_hash=0)
                ))
            
            return "success"
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: %s", e)
            return "error"

    async def delete_history_ultimate(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                user = await self.client.get_entity(types.PeerUser(user_id))
                await self.client(functions.messages.DeleteHistoryRequest(
                    peer=types.InputPeerUser(
                        user_id=user.id,
                        access_hash=user.access_hash
                    ),
                    max_id=0,
                    revoke=True
                ))
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_hash, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
                await self.client(functions.messages.DeleteHistoryRequest(
                    peer=types.InputPeerUser(user_id=user_id, access_hash=0),
                    max_id=0,
                    revoke=True
                ))
            
            return True
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %s", e)
            return False

    async def process_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
        if not message.is_private or message.out:
            return

        user_id = message.sender_id
        text = (message.text or "").lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        triggers = {
            "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è": r"–ø–æ—Ä–Ω–æ|porn|xxx|onlyfans|—Å–µ–∫—Å|üîû",
            "–†–µ–∫–ª–∞–º–∞": r"–ø–æ–¥–ø–∏—à–∏—Å—å|–∫–∞–Ω–∞–ª|–∫—É–ø–∏—Ç—å|—Ä–µ–∫–ª–∞–º–∞",
            "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ": r"bit\.ly|—Å–∫–∞—á–∞—Ç—å|\.exe|–≤–∏—Ä—É—Å"
        }
        
        reason = next((r for r, p in triggers.items() if re.search(p, text, re.I)), None)
        if not reason:
            return

        response = []
        
        # 1. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if self.config["ban_users"]:
            status = await self.block_user_ultimate(user_id)
            if status == "already_banned":
                response.append(self.strings["already_banned"])
            elif status == "error":
                response.append(self.strings["user_not_found"])
        
        # 2. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.config["delete_messages"]:
            try:
                await message.delete()
            except:
                pass
        
        # 3. –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if self.config["delete_history"]:
            if await self.delete_history_ultimate(user_id):
                response.append(self.strings["history_cleared"])
        
        # 4. –û—Ç—á—ë—Ç
        if self.config["report_to_chat"] and self._log_chat:
            try:
                await self.client.send_message(
                    self._log_chat,
                    self.strings["log_msg"].format(
                        user_id=user_id,
                        time=datetime.now().strftime("%d.%m.%Y %H:%M"),
                        reason=reason,
                        msg=utils.escape_html(text[:200])
                    )
                )
            except:
                pass
        
        # 5. –û—Ç–≤–µ—Ç
        response.append(self.strings["banned"].format(reason=reason))
        await utils.answer(message, "\n".join(filter(None, response)))
        self._ban_count += 1

    async def watcher(self, message: Message):
        await self.process_message(message)

    async def uastatcmd(self, message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"""
        stats = (
            "üìä <b>UltimateAntiSpam Stats</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {self._ban_count}\n"
            f"‚Ä¢ –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {'‚úÖ ON' if self.config['ban_users'] else '‚ùå OFF'}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: {'‚úÖ ON' if self.config['delete_history'] else '‚ùå OFF'}\n"
            f"‚Ä¢ –û—Ç—á—ë—Ç—ã: {'‚úÖ ON' if self.config['report_to_chat'] else '‚ùå OFF'}"
        )
        await utils.answer(message, stats)
