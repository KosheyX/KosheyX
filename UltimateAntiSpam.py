import re
import logging
from datetime import datetime
from hikkatl.types import Message
from hikkatl import functions
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class UltimateAntiSpamFixed(loader.Module):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º –º–æ–¥—É–ª—å –¥–ª—è –õ–°"""

    strings = {
        "name": "UltimateAntiSpamFixed",
        "banned": "üö® <b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "log_msg": (
            "üõ° <b>–õ–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –õ–°</b>\n\n"
            "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "‚è∞ –í—Ä–µ–º—è: {time}\n"
            "üîû –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "üìù –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{msg}</code>"
        ),
        "chat_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ —á–∞—Ç",
        "setup_error": "‚ö†Ô∏è –ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "ban_users", True, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–Ω–∏—Ç—å",
            "delete_messages", True, "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        )
        self._log_chat = None
        self._ban_count = 0

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            self._log_chat = await self.client.get_entity("https://t.me/+ve_fxQ6dYj9hOTJi")
            logger.info(f"–ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self._log_chat.title}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            self._log_chat = None

    async def detect_triggers(self, message: Message) -> str:
        text = (message.text or "").lower()
        triggers = {
            "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è": r"–ø–æ—Ä–Ω–æ|porn|xxx|onlyfans|—Å–µ–∫—Å|üîû",
            "–†–µ–∫–ª–∞–º–∞": r"–ø–æ–¥–ø–∏—à–∏—Å—å|–∫–∞–Ω–∞–ª|–∫—É–ø–∏—Ç—å|—Ä–µ–∫–ª–∞–º–∞",
            "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ": r"bit\.ly|—Å–∫–∞—á–∞—Ç—å|\.exe|–≤–∏—Ä—É—Å"
        }
        for reason, pattern in triggers.items():
            if re.search(pattern, text, re.IGNORECASE):
                return reason
        return None

    async def process_ban(self, message: Message, reason: str):
        user = await message.get_sender()
        
        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.config["ban_users"]:
                await self.client(functions.contacts.BlockRequest(id=user.id))
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.config["delete_messages"]:
                await message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞
            if self._log_chat:
                try:
                    await self.client.send_message(
                        entity=self._log_chat,
                        message=self.strings("log_msg").format(
                            user=utils.escape_html(user.first_name),
                            user_id=user.id,
                            time=datetime.now().strftime("%d.%m.%Y %H:%M"),
                            reason=reason,
                            msg=utils.escape_html((message.text or "")[:200])
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
                    await utils.answer(message, self.strings("chat_error"))
            else:
                await utils.answer(message, self.strings("setup_error"))

            await utils.answer(message, self.strings("banned").format(reason=reason))
            self._ban_count += 1

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    async def watcher(self, message: Message):
        if not message.is_private or message.out:
            return
            
        if reason := await self.detect_triggers(message):
            await self.process_ban(message, reason)

    async def uafstatcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
        status = (
            "üîß <b>UltimateAntiSpamFixed Status</b>\n\n"
            f"‚Ä¢ –ß–∞—Ç –ª–æ–≥–æ–≤: {'‚úÖ ' + self._log_chat.title if self._log_chat else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–±–∞–Ω–µ–Ω–æ: {self._ban_count}\n"
            f"‚Ä¢ –ê–≤—Ç–æ–±–∞–Ω: {'‚úÖ –í–∫–ª' if self.config['ban_users'] else '‚ùå –í—ã–∫–ª'}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if self.config['delete_messages'] else '‚ùå –í—ã–∫–ª'}"
        )
        await utils.answer(message, status)
